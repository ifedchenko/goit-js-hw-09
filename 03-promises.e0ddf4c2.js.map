{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAIA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAXMQ,SAASC,cAAc,SAe/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAEN,IAAMC,EAAQC,SAASH,EAAMI,OAAOC,SAAShB,MAAMiB,OAC7CC,EAAOJ,SAASH,EAAMI,OAAOC,SAASE,KAAKD,OAC3CE,EAASL,SAASH,EAAMI,OAAOC,SAASG,OAAOF,OAErD,GAAIJ,EAAQ,GAAKK,EAAO,GAAKC,GAAU,EAarC,OAZIN,EAAQ,GACVO,EAAAxB,GAASyB,OAAOC,QAAQ,wBAA8BC,OAANV,IAG9CK,EAAO,GACTE,EAAAxB,GAASyB,OAAOC,QAAQ,uBAA4BC,OAALL,SAG7CC,GAAU,GACZC,EAAAxB,GAASyB,OAAOC,QAAQ,yBAAgCC,OAAPJ,KAQrD,IAFA,IAAIK,EAAeX,EAEVY,EAAI,EAAGA,GAAKN,EAAQM,IAC3B3B,EAAc2B,EAAGD,GAAcE,MAC7B,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACXoB,EAAAxB,GAASyB,OAAOO,QACd,uBAAwCL,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAIlD,SAAA2B,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACXoB,EAAAxB,GAASyB,OAAOQ,QACd,sBAAuCN,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAKnDwB,GAAgBN,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(event.target.elements.delay.value);\n  const step = parseInt(event.target.elements.step.value);\n  const amount = parseInt(event.target.elements.amount.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    if (delay < 0) {\n      Notiflix.Notify.warning(`Invalid delay value: ${delay}`);\n    }\n\n    if (step < 0) {\n      Notiflix.Notify.warning(`Invalid step value: ${step}`);\n    }\n\n    if (amount <= 0) {\n      Notiflix.Notify.warning(`Invalid amount value: ${amount}`);\n    }\n\n    return;\n  }\n\n  let currentDelay = delay;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay).then(\n      ({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      },\n      ({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    );\n    currentDelay += step;\n  }\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","parseInt","target","elements","value","step","amount","$parcel$interopDefault","Notify","warning","concat","currentDelay","i","then","param","success","failure"],"version":3,"file":"03-promises.e0ddf4c2.js.map"}