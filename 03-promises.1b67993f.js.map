{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAIA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAXMQ,SAASC,cAAc,SAe/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAEN,IAAMC,EAAQC,SAASH,EAAMI,OAAOC,SAAShB,MAAMiB,OAC7CC,EAAOJ,SAASH,EAAMI,OAAOC,SAASE,KAAKD,OAC3CE,EAASL,SAASH,EAAMI,OAAOC,SAASG,OAAOF,OAErD,GAAIJ,GAAS,GAAKO,MAAMP,GAEtBQ,EAAAzB,GAAS0B,OAAOC,QAAQ,wBAA8BC,OAANX,SAIlD,GAAIK,GAAQ,GAAKE,MAAMF,GAErBG,EAAAzB,GAAS0B,OAAOC,QAAQ,wBAA6BC,OAALN,SAIlD,GAAIC,GAAU,GAAKC,MAAMD,GAEvBE,EAAAzB,GAAS0B,OAAOC,QAAQ,wBAA+BC,OAAPL,SAMlD,IADA,IAAIM,EAAeZ,EACVa,EAAI,EAAGA,GAAKP,EAAQO,IAC3B5B,EAAc4B,EAAGD,GAAcE,MAC7B,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACXqB,EAAAzB,GAAS0B,OAAOO,QACd,uBAAwCL,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAIlD,SAAA4B,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACXqB,EAAAzB,GAAS0B,OAAOQ,QACd,sBAAuCN,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAKnDyB,GAAgBP,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(event.target.elements.delay.value);\n  const step = parseInt(event.target.elements.step.value);\n  const amount = parseInt(event.target.elements.amount.value);\n\n  if (delay <= 0 || isNaN(delay)) {\n    // console.log(`Invalid delay value: ${delay}`);\n    Notiflix.Notify.warning(`Invalid delay value: ${delay}`);\n    return;\n  }\n\n  if (step <= 0 || isNaN(step)) {\n    // console.log(`Invalid step value: ${step}`);\n    Notiflix.Notify.warning(`Invalid delay value: ${step}`);\n    return;\n  }\n\n  if (amount <= 0 || isNaN(amount)) {\n    // console.log(`Invalid amount value: ${amount}`);\n    Notiflix.Notify.warning(`Invalid delay value: ${amount}`);\n\n    return;\n  }\n\n  let currentDelay = delay;\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay).then(\n      ({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      },\n      ({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    );\n    currentDelay += step;\n  }\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","parseInt","target","elements","value","step","amount","isNaN","$parcel$interopDefault","Notify","warning","concat","currentDelay","i","then","param","success","failure"],"version":3,"file":"03-promises.1b67993f.js.map"}