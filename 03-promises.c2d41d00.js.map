{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAXAQ,SAASC,cAAc,SAe/BC,iBAAiB,UAAUC,IAC9BA,EAAMC,iBAEN,MAAMC,EAAQC,SAASH,EAAMI,OAAOC,SAAShB,MAAMiB,OAC7CC,EAAOJ,SAASH,EAAMI,OAAOC,SAASE,KAAKD,OAC3CE,EAASL,SAASH,EAAMI,OAAOC,SAASG,OAAOF,OAErD,GAAIJ,GAAS,GAAKO,MAAMP,GAGtB,YADAQ,EAAAzB,GAAS0B,OAAOC,QAAQ,wBAAwBV,KAIlD,GAAIK,GAAQ,GAAKE,MAAMF,GAGrB,YADAG,EAAAzB,GAAS0B,OAAOC,QAAQ,wBAAwBL,KAIlD,GAAIC,GAAU,GAAKC,MAAMD,GAIvB,YAFAE,EAAAzB,GAAS0B,OAAOC,QAAQ,wBAAwBJ,KAKlD,IAAIK,EAAeX,EAEnB,IAAK,IAAIY,EAAI,EAAGA,GAAKN,EAAQM,IAC3B3B,EAAc2B,EAAGD,GAAcE,MAC7B,EAAC3B,SAAEA,EAAQC,MAAEA,MACXqB,EAAAzB,GAAS0B,OAAOK,QACd,uBAAqB5B,QAAiBC,MAAU,IAIpD,EAACD,SAAEA,EAAQC,MAAEA,MACXqB,EAAAzB,GAAS0B,OAAOM,QACd,sBAAoB7B,QAAiBC,MAAU,IAKrDwB,GAAgBN,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delay = parseInt(event.target.elements.delay.value);\n  const step = parseInt(event.target.elements.step.value);\n  const amount = parseInt(event.target.elements.amount.value);\n\n  if (delay <= 0 || isNaN(delay)) {\n    // console.log(`Invalid delay value: ${delay}`);\n    Notiflix.Notify.warning(`Invalid delay value: ${delay}`);\n    return;\n  }\n\n  if (step <= 0 || isNaN(step)) {\n    // console.log(`Invalid step value: ${step}`);\n    Notiflix.Notify.warning(`Invalid delay value: ${step}`);\n    return;\n  }\n\n  if (amount <= 0 || isNaN(amount)) {\n    // console.log(`Invalid amount value: ${amount}`);\n    Notiflix.Notify.warning(`Invalid delay value: ${amount}`);\n\n    return;\n  }\n\n  let currentDelay = delay;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay).then(\n      ({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      },\n      ({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    );\n    currentDelay += step;\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","parseInt","target","elements","value","step","amount","isNaN","$parcel$interopDefault","Notify","warning","currentDelay","i","then","success","failure"],"version":3,"file":"03-promises.c2d41d00.js.map"}